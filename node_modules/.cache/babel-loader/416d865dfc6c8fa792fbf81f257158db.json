{"ast":null,"code":"var _jsxFileName = \"/Users/patrickbrown/Desktop/Personal/git/personal website/src/NavBar.js\";\nimport React from \"react\";\nimport \"./NavBar.css\";\nimport { Button, ExpandingButton } from \"./CustomNavButton.js\";\nimport { FaGithub, FaLinkedin } from \"react-icons/fa\";\nimport ExpandedNavBar from \"./ExpandedNavBar.js\";\nimport ToExpandNavBar from \"./ToExpandNavBar.js\";\nexport default class NavBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      atTop: true,\n      showExpanded: true,\n      buttonClicked: false,\n      hovering: false\n    };\n    this.handleExpandClick = this.handleExpandClick.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.updateState();\n  }\n\n  handleExpandClick() {\n    this.setState({\n      showExpanded: true\n    });\n  }\n\n  updateState() {\n    console.log(\"updateState\"); //if it's at the top, I want expanded to always show\n    //\n    //if it's NOT at the top, I want expanded to show only\n    //           if the button has been pressed\n    //if not at top and !show expanded,\n\n    this.setState({\n      atTop: this.props.atTop\n    });\n\n    if (this.state.atTop == true) {\n      this.setState({\n        showExpanded: true,\n        buttonClicked: false\n      });\n    } else if (this.state.atTop == false && this.state.buttonClicked == true) {\n      this.setState({\n        showExpanded: true\n      });\n    } else {\n      this.setState({\n        showExpanded: false\n      });\n    }\n  }\n\n  mouseEnter() {\n    this.setState({\n      hovering: true\n    });\n  }\n\n  mouseLeave() {\n    this.setState({\n      hovering: false\n    });\n  }\n\n  render() {\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, this.state.hovering || this.state.atTop ? React.createElement(ExpandedNavBar, {\n      onMouseLeave: this.mouseLeave,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }) : React.createElement(ToExpandNavBar, {\n      action: this.handleExpandClick,\n      onMouseEnter: this.mouseEnter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/patrickbrown/Desktop/Personal/git/personal website/src/NavBar.js"],"names":["React","Button","ExpandingButton","FaGithub","FaLinkedin","ExpandedNavBar","ToExpandNavBar","NavBar","Component","constructor","props","state","atTop","showExpanded","buttonClicked","hovering","handleExpandClick","bind","componentWillReceiveProps","nextProps","updateState","setState","console","log","mouseEnter","mouseLeave","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,cAAP;AACA,SAASC,MAAT,EAAiBC,eAAjB,QAAwC,sBAAxC;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,gBAArC;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,eAAe,MAAMC,MAAN,SAAqBP,KAAK,CAACQ,SAA3B,CAAqC;AAClDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,IADI;AAEXC,MAAAA,YAAY,EAAE,IAFH;AAGXC,MAAAA,aAAa,EAAE,KAHJ;AAIXC,MAAAA,QAAQ,EAAE;AAJC,KAAb;AAMA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACD;;AACDC,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACnC,SAAKC,WAAL;AACD;;AACDJ,EAAAA,iBAAiB,GAAG;AAClB,SAAKK,QAAL,CAAc;AAAER,MAAAA,YAAY,EAAE;AAAhB,KAAd;AACD;;AACDO,EAAAA,WAAW,GAAG;AACZE,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EADY,CAEZ;AACA;AACA;AACA;AAEA;;AAEA,SAAKF,QAAL,CAAc;AAAET,MAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE;AAApB,KAAd;;AACA,QAAI,KAAKD,KAAL,CAAWC,KAAX,IAAoB,IAAxB,EAA8B;AAC5B,WAAKS,QAAL,CAAc;AAAER,QAAAA,YAAY,EAAE,IAAhB;AAAsBC,QAAAA,aAAa,EAAE;AAArC,OAAd;AACD,KAFD,MAEO,IAAI,KAAKH,KAAL,CAAWC,KAAX,IAAoB,KAApB,IAA6B,KAAKD,KAAL,CAAWG,aAAX,IAA4B,IAA7D,EAAmE;AACxE,WAAKO,QAAL,CAAc;AAAER,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACD,KAFM,MAEA;AACL,WAAKQ,QAAL,CAAc;AAAER,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACD;AACF;;AACDW,EAAAA,UAAU,GAAG;AACX,SAAKH,QAAL,CAAc;AAAEN,MAAAA,QAAQ,EAAE;AAAZ,KAAd;AACD;;AACDU,EAAAA,UAAU,GAAG;AACX,SAAKJ,QAAL,CAAc;AAAEN,MAAAA,QAAQ,EAAE;AAAZ,KAAd;AACD;;AACDW,EAAAA,MAAM,GAAG;AACPJ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKZ,KAAjB;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKA,KAAL,CAAWI,QAAX,IAAuB,KAAKJ,KAAL,CAAWC,KAAlC,GACC,oBAAC,cAAD;AAAgB,MAAA,YAAY,EAAE,KAAKa,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAGC,oBAAC,cAAD;AACE,MAAA,MAAM,EAAE,KAAKT,iBADf;AAEE,MAAA,YAAY,EAAE,KAAKQ,UAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADF;AAYD;;AAvDiD","sourcesContent":["import React from \"react\";\nimport \"./NavBar.css\";\nimport { Button, ExpandingButton } from \"./CustomNavButton.js\";\nimport { FaGithub, FaLinkedin } from \"react-icons/fa\";\nimport ExpandedNavBar from \"./ExpandedNavBar.js\";\nimport ToExpandNavBar from \"./ToExpandNavBar.js\";\nexport default class NavBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      atTop: true,\n      showExpanded: true,\n      buttonClicked: false,\n      hovering: false\n    };\n    this.handleExpandClick = this.handleExpandClick.bind(this);\n  }\n  componentWillReceiveProps(nextProps) {\n    this.updateState();\n  }\n  handleExpandClick() {\n    this.setState({ showExpanded: true });\n  }\n  updateState() {\n    console.log(\"updateState\");\n    //if it's at the top, I want expanded to always show\n    //\n    //if it's NOT at the top, I want expanded to show only\n    //           if the button has been pressed\n\n    //if not at top and !show expanded,\n\n    this.setState({ atTop: this.props.atTop });\n    if (this.state.atTop == true) {\n      this.setState({ showExpanded: true, buttonClicked: false });\n    } else if (this.state.atTop == false && this.state.buttonClicked == true) {\n      this.setState({ showExpanded: true });\n    } else {\n      this.setState({ showExpanded: false });\n    }\n  }\n  mouseEnter() {\n    this.setState({ hovering: true });\n  }\n  mouseLeave() {\n    this.setState({ hovering: false });\n  }\n  render() {\n    console.log(this.state);\n    return (\n      <div>\n        {this.state.hovering || this.state.atTop ? (\n          <ExpandedNavBar onMouseLeave={this.mouseLeave} />\n        ) : (\n          <ToExpandNavBar\n            action={this.handleExpandClick}\n            onMouseEnter={this.mouseEnter}\n          />\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}